// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:list";
@use "sass:math";
@use "sass:meta";
@use "@sass-collective/strip-unit";
@use "./variables";

@function convert($values) {
    $result: ();
    $baseline: strip-unit.strip(variables.$baseline);
    $separator: list.separator($values);

    @each $value in $values {
        @if meta.type-of($value) == "number" and not math.is-unitless($value) and math.unit($value) != "px" {
            @error "Invalid unit on value `#{$value}`. Choose value with `px` unit instead or without unit.";
        } @else if meta.type-of($value) == "number" and not math.is-unitless($value) {
            $value: strip-unit.strip($value);
        }

        @if meta.type-of($value) == "number" and $value != 0 {
            $result: list.append($result, math.div($value, $baseline) * 1rem);
        } @else if meta.type-of($value) == "list" {
            $result: list.append($result, convert($value), $separator);
        } @else {
            $result: list.append($result, $value);
        }
    }

    @return $result;
}

///
/// Fallback function in case if your namespace if not enough explicit.
///
/// @example
///     @use "@sass-collective/rem" as foo;
///     // font-size: foo.rem(16px);
///
@function rem($values) {
    @return convert($values);
}
